;Class:CSE 313 Machine Organization Lab
;Quarter: Fall 2016
;Name(s): Andrew Hedy, Steven Tang
;Lab 5: Subroutines: Multiplication, Division, and Modulus
;Description: 
	;In this lab we are focusing on subroutines (JSR). We are doing this by using routines multiplication, division, and modulus. The modulus can be
	;used as part of the division subroutine since we are just trying to find the remainder after dividing. The subroutine for multiplication branches
	;to 'MULT' and keeps adding X to itself while decrementing Y each time X is added. This is done using a loop with the branch operation. The sub-
	;routine for division branches to 


.ORIG x3000 
	
	;LOAD VALUES.
	LDI R0, X	;LOAD VALUE FROM M[x3100] INTO R0 	
	LDI R1, Y 	;LOAD VALUE FROM M[x3101] INTO R1
	
	;JUMP TO SUBROUTINE AND STORE X * Y INTO R2.
	JSR MULT 	;JUMP TO SUBROUTINE MULT
	STI R2, XY 	;STORE THE VALUE FROM R2 INTO M[x3102]

	;JUMP TO SUBROUTINE AND STORE TWO VALUES X/Y AND ITS REMAINDER.
   	JSR DIV  	;JUMP TO SUBROUTINE DIV		
	STI R4, QUOT  	;STORE THE VALUE R4 HOLDS INTO M[x3103]  						
	STI R5, MOD  	;STORE THE VALUE R5 HOLDS INTO M[x3104]		   			
	
HALT

	;NEED TO SAVE VALUES SO WE CAN REUSE THEM LATER.      
MULT 	AND R2, R2, #0 	;CLEARING R2 TO USE FOR XY	
	AND R3, R3, #0	;CLEARING R3 TO CHECK SIGNS
	ST R0, SAVEX  	;STORE VALUE R0 HOLDS INTO SAVEX	
	ST R1, SAVEY 	;STORE VALUE R1 HOLDS INTO SAVEY 	

	;CHECKING VALUES OF BOTH INPUTS OF X AND Y	
	ADD R3,R3,#1	;ADDING #1 TO R3 AND STORING IN R3
	ADD R0,R0,#0  	;ADD #0 TO R0 TO CHECK	
	BRn NEG  	;IF R0(X) IS NEGATIVE BRANCH TO LABEL 'NEG'	
CHECK 	ADD R1,R1,#0  	;ADD #0 TO R1 TO CHECK
	BRn NEG1  	;IF R1(Y) IS NAGATIVE BRANCH TO LABEL 'NEG1'	
	BRzp OK  	;IF EITHER ZERO OR POSITIVE BRANCH TO LABEL 'OK'	

	;FLIPPING SIGNS AND CHECKING 
NEG 	NOT R0,R0  	;NEGATING R0(X)	
	ADD R0,R0,#1  	;ADDING #1 TO R1 TO MAKE IT 2'S COMPLEMENT
	NOT R3,R3	;NEGATING R3
	ADD R3,R3,#1	;ADDING #1 TO R3 FOR TWO'S COMPLEMENT		
	BRnzp CHECK 	;BRANCHES BACK TO 'CHECK'

	;FLIPPING SIGNS
NEG1 	NOT R1,R1  	;NEGATING R1(Y)
	ADD R1,R1,#1  	;ADDING #1 TO R1 TO MAKE IT 2'S COMPLEMENT
	NOT R3,R3  	;NEGATING R3	
	ADD R3,R3,#1	;ADDING #1 TO R3 FOR 2'S COMPLEMENT

	;IF R1(Y) IS ZERO THAN THE FUNCTION WILL BRANCH AND OUTPUT ZERO
OK 	ADD R1,R1,#0 	;ADDING #0 TO R1(Y) TO CHECK
	BRz DONE1 	;IF R1 IS ZERO THAN BRANCH TO LABEL 'DONE1'	

	;THIS IS WHERE THE ACTUAL MULTIPLICATION HAPPENS
LOOP	ADD R2,R2,R0  	;ADDING R0(X) TO R2(TEMP REG)
	ADD R1,R1,#-1  	;DECREMENT R1(Y)
	BRp LOOP  	;IF R1(Y) IS STILL POSITIVE LOOP
	ADD R3,R3,#0	;ADDING #0 TO R3 TO CHECK		
	BRn SIGN  	;IF NEGATIVE BRANCH TO LABEL 'SIGN'
	BRzp DONE  	;IF ZERO OR POSITIVE BRANCH TO LABEL 'DONE'

	;IF OUR OUTPUT IS NEGATIVE WE HAVE TO NEGATE
SIGN  	NOT R2,R2 	;NEGATE R2
	ADD R2,R2,#1  	;ADD #1 TO R2 TO MAKE IT 2'S COMPLEMENT	

	;WE STORE OUR X AND Y VALUES TO BE USED LATER
DONE	LD R0, SAVEX  	;SAVE X VALUE
	LD R1, SAVEY  	;SAVE Y VALUE	
	RET		;RETURN FROM SUBROUTINE

	;WE STORE OUR X AND Y VALUES AND JUST OUPUT ZERO
DONE1	LD R0, SAVEX  	;SAVE X VALUE
	LD R1, SAVEY 	;SAVE Y VALUE	
	ADD R2,R2,R1  	;R1+R2 AND STORED IN R2	
	RET		;RETURN FROM SUBROUTINE

HALT
		
DIV	AND R4,R4,#0    ;CLEAR R4 TO USE FOR QOUT
	AND R5,R5,#0 	;CLEAR R5 TO USE FOR MOD	
	AND R6,R6,#0  	;CLEAR R6	
	ADD R1,R1,#0  	;ADD #0 TO R1(Y) TO CHECK
	BRz EXIT  	;IF EITHER NEGATIVE OR ZERO BRANCH TO LABEL 'EXIT'
	BRn NEGY	;IF R1 IS NEGATIVE BRANCH TO NEGY
	ADD R0,R0,#0  	;ADD #0 TO R0(X) TO CHECK	
	BRn NEGX  	;IF NEGATIVE BRANCH TO LABEL 'EXITX'
	ADD R6,R6,R0  	;ADD R0(X) TO R6(TEMP REG) AND STORE IN R6	
	NOT R1,R1  	;NEGATING R1
	ADD R1,R1,#1  	;ADDING #1 TO R1 TO MAKE IT 2'S COMPLEMENT	
CONT	ADD R0,R0,R1  	;ADDING R0 TO R1 (ULTIMATELY SUBTRACTING)	
	BRn LOOP2  	;IF NEGATIVE BRANCH TO LOOP2	

NEGY	NOT R1,R1	;
	ADD R1,R1,#1	;
	BRp CONT	;

	;THIS IS WHERE THE ACTUAL DIVISION HAPPENS
LOOP1	ADD R6,R6,R1  	;R6(X) ADDED TO R1 AND STORED IN R6
	BRn STOP  	;BRANCH TO 'STOP' IF NEGATIVE	
	ADD R4,R4,#1  	;R4 INCREMENTED BY 1 EVERY TIME R6 IS STILL POSITIVE	
	ADD R6,R6,#0  	;ADD #0 TO R6 TO CHECK	
	BRzp LOOP1 	;IF EITHER ZERO OR POSITIVE LOOP BACK TO LABEL LOOP1	

	;STORING AND MOVING ON TO REMAINDER
STOP	NOT R1,R1  	;NEGATE R1
	ADD R1,R1,#1  	;ADDING (1) TO R1 TO MAKE IT 2'S COMPLEMENT	
	ADD R5,R1,R6  	;ADD R1 TO R6 AND STORE IN R5	
	BRnzp AHEAD  	;	

	;STORING THE REMAINDER OF Y IN R5 AFTER SUBTRACTING FROM X
LOOP2	NOT R0,R0 	;NEGATING R0
	ADD R0,R0,#1  	;ADDING (1) TO R0 TO MAKE IT 2'S COMPLEMENT	
	ADD R5,R5,R0 	;ADDING R0 TO R5	
AHEAD 	RET 		;RETURN TO SUBROUTINE

	;IF X IS 0 JUST RETURN 0 TO DIV OR MOD
	;IF Y IS 0 JUST RETURN 0 TO DIV OR MOD
EXIT 	ADD R4,R4,#0 	;
	ADD R5,R5,#0 	;	
	RET		;RETURN FROM SUBROUTINE
NEGX	RET 		;

HALT

	X 	.FILL x3100
	Y 	.FILL x3101
	XY 	.FILL x3102
	QUOT 	.FILL x3103
	MOD 	.FILL x3104
	SAVEX  	.FILL x0
	SAVEY 	.FILL x0


.END
